from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
import logging

from utils.admin_utils import (
    check_admin_level, add_mikrotik, upload_openvpn_template,
    add_level2_admin, get_mikrotik_list, delete_mikrotik, delete_admin,
    get_mikrotik_by_id, edit_mikrotik_field, update_admin_name,
    update_admin_mikrotiks, promote_admin_to_level1, demote_admin_to_level2
)

router = Router()

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("vpn_bot")

from utils.admin_utils import (
    check_admin_level, add_mikrotik, upload_openvpn_template,
    add_level2_admin, get_mikrotik_list, delete_mikrotik, delete_admin
)
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞
class EditMikrotik(StatesGroup):
    waiting_for_field = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    waiting_for_name = State()
    waiting_for_host = State()
    waiting_for_username = State()
    waiting_for_password = State()
    waiting_for_ovpn_profile = State()
    waiting_for_wg_interface = State()
    waiting_for_wg_endpoint = State()
    waiting_for_wg_allowed_ips = State()
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞
class AddMikrotik(StatesGroup):
    waiting_for_name = State()
    waiting_for_host = State()
    waiting_for_username = State()
    waiting_for_password = State()
    waiting_for_ovpn_profile = State()
    waiting_for_wg_interface = State()
    waiting_for_wg_endpoint = State()
    waiting_for_wg_allowed_ips = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ OpenVPN
class UploadTemplate(StatesGroup):
    waiting_for_mikrotik = State()
    waiting_for_template = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è
class AddAdmin(StatesGroup):
    waiting_for_id = State()
    waiting_for_name = State()
    waiting_for_mikrotiks = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class EditAdmin(StatesGroup):
    waiting_for_name = State()
    waiting_for_mikrotiks = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è
def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∞–º–∏"),
                KeyboardButton(text="üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
            ],
            [
                KeyboardButton(text="üìã OpenVPN –ü—Ä–æ—Ñ–∏–ª–∏"),
                KeyboardButton(text="üî∑ WireGuard –ü—Ä–æ—Ñ–∏–ª–∏")
            ],
            [
                KeyboardButton(text="üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ VPN"),
                KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å VPN")
            ],
            [
                KeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫"),
                KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")  # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        persistent=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.callback_query(F.data.startswith("edit_admin_l1:"))
async def edit_admin_l1_callback(callback: CallbackQuery):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    
    admin_id = int(callback.data.split(":", 1)[1])
    
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è (ID: {admin_id})\n\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã 1-–≥–æ —É—Ä–æ–≤–Ω—è –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å —Ç–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Üì –ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è", callback_data=f"demote_admin:{admin_id}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_list")]
        ])
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("edit_admin_l2:"))
async def edit_admin_l2_callback(callback: CallbackQuery, state: FSMContext):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    
    admin_id = int(callback.data.split(":", 1)[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    with open('data/admins.json', 'r', encoding='utf-8') as f:
        admins_data = json.load(f)
    
    admin_info = None
    for admin in admins_data["level_2"]:
        if admin["id"] == admin_id:
            admin_info = admin
            break
    
    if not admin_info:
        return await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    mikrotiks = get_mikrotik_list(callback.from_user.id)
    allowed_mikrotiks = admin_info.get("allowed_mikrotiks", [])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    allowed_names = []
    for mikrotik in mikrotiks:
        if mikrotik["id"] in allowed_mikrotiks:
            allowed_names.append(mikrotik["name"])
    
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è:\n"
        f"ID: {admin_id}\n"
        f"–ò–º—è: {admin_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∏: {', '.join(allowed_names) if allowed_names else '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞'}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_admin_name:{admin_id}")],
            [InlineKeyboardButton(text="üñ•Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ç–∏–∫–∞–º", callback_data=f"edit_admin_mikrotiks:{admin_id}")],
            [InlineKeyboardButton(text="‚Üë –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ 1-–≥–æ —É—Ä–æ–≤–Ω—è", callback_data=f"promote_admin:{admin_id}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_list")]
        ])
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data.startswith("edit_admin_name:"))
async def edit_admin_name_callback(callback: CallbackQuery, state: FSMContext):
    admin_id = int(callback.data.split(":", 1)[1])
    
    await state.update_data(admin_id=admin_id, edit_type="name")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(EditAdmin.waiting_for_name)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ç–∏–∫–∞–º
@router.callback_query(F.data.startswith("edit_admin_mikrotiks:"))
async def edit_admin_mikrotiks_callback(callback: CallbackQuery, state: FSMContext):
    admin_id = int(callback.data.split(":", 1)[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    with open('data/admins.json', 'r', encoding='utf-8') as f:
        admins_data = json.load(f)
    
    admin_info = None
    for admin in admins_data["level_2"]:
        if admin["id"] == admin_id:
            admin_info = admin
            break
    
    if not admin_info:
        return await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    mikrotiks = get_mikrotik_list(callback.from_user.id)
    current_mikrotiks = admin_info.get("allowed_mikrotiks", [])
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    buttons = []
    for mikrotik in mikrotiks:
        is_selected = "‚úÖ " if mikrotik['id'] in current_mikrotiks else "‚ùå "
        buttons.append([InlineKeyboardButton(
            text=f"{is_selected}{mikrotik['name']}", 
            callback_data=f"toggle_mikrotik:{admin_id}:{mikrotik['id']}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    buttons.append([InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"save_admin_mikrotiks:{admin_id}")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit_admin_l2:{admin_id}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await state.update_data(admin_id=admin_id, selected_mikrotiks=current_mikrotiks[:])  # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    
    await callback.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ç–∏–∫–∞–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_info.get('name')}:\n\n"
        f"‚úÖ - –î–æ—Å—Ç—É–ø –µ—Å—Ç—å\n"
        f"‚ùå - –î–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ç–∏–∫, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø:",
        reply_markup=keyboard
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ç–∏–∫—É
@router.callback_query(F.data.startswith("toggle_mikrotik:"))
async def toggle_mikrotik_callback(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":", 2)
    admin_id = int(parts[1])
    mikrotik_id = parts[2]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_mikrotiks = data.get("selected_mikrotiks", [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ç–∏–∫—É
    if mikrotik_id in selected_mikrotiks:
        selected_mikrotiks.remove(mikrotik_id)
    else:
        selected_mikrotiks.append(mikrotik_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_mikrotiks=selected_mikrotiks)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    mikrotiks = get_mikrotik_list(callback.from_user.id)
    buttons = []
    for mikrotik in mikrotiks:
        is_selected = "‚úÖ " if mikrotik['id'] in selected_mikrotiks else "‚ùå "
        buttons.append([InlineKeyboardButton(
            text=f"{is_selected}{mikrotik['name']}", 
            callback_data=f"toggle_mikrotik:{admin_id}:{mikrotik['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"save_admin_mikrotiks:{admin_id}")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit_admin_l2:{admin_id}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with open('data/admins.json', 'r', encoding='utf-8') as f:
        admins_data = json.load(f)
    
    admin_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    for admin in admins_data["level_2"]:
        if admin["id"] == admin_id:
            admin_name = admin.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            break
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(f"–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ç–∏–∫—É {'–¥–æ–±–∞–≤–ª–µ–Ω' if mikrotik_id in selected_mikrotiks else '—É–¥–∞–ª–µ–Ω'}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data.startswith("save_admin_mikrotiks:"))
async def save_admin_mikrotiks_callback(callback: CallbackQuery, state: FSMContext):
    admin_id = int(callback.data.split(":", 1)[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_mikrotiks = data.get("selected_mikrotiks", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    success, message = update_admin_mikrotiks(admin_id, selected_mikrotiks, callback.from_user.id)
    
    await callback.message.edit_text(message)
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("promote_admin:"))
async def promote_admin_callback(callback: CallbackQuery):
    admin_id = int(callback.data.split(":", 1)[1])
    
    success, message = promote_admin_to_level1(admin_id, callback.from_user.id)
    
    await callback.message.edit_text(message)
    await callback.answer()

@router.callback_query(F.data.startswith("demote_admin:"))
async def demote_admin_callback(callback: CallbackQuery, state: FSMContext):
    admin_id = int(callback.data.split(":", 1)[1])
    
    await state.update_data(admin_id=admin_id, edit_type="demote")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–Ω–∏–∂–∞–µ–º–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(EditAdmin.waiting_for_name)
    
    await callback.answer()

@router.callback_query(F.data == "back_to_admin_list")
async def back_to_admin_list_callback(callback: CallbackQuery):
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
    await send_admins_list(callback.message, 1)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
@router.message(EditAdmin.waiting_for_name)
async def process_edit_admin_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    admin_id = data.get("admin_id")
    edit_type = data.get("edit_type")
    
    if edit_type == "name":
        success, result = update_admin_name(admin_id, message.text, message.from_user.id)
    elif edit_type == "demote":
        success, result = demote_admin_to_level2(admin_id, message.text, message.from_user.id)
    
    await message.reply(result)
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    from handlers.vpn import get_main_menu
    await message.answer(
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º:",
        reply_markup=get_main_menu(message.from_user.id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command("admin"))
async def admin_command(message: types.Message):
    admin_level = check_admin_level(message.from_user.id)
    
    if admin_level != 1:
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º 1-–≥–æ —É—Ä–æ–≤–Ω—è.")
    
    await message.reply(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è",
        reply_markup=get_admin_keyboard()
    )
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞
@router.callback_query(F.data.startswith("edit_mikrotik:"))
async def edit_mikrotik_callback(callback: CallbackQuery):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    
    mikrotik_id = callback.data.split(":", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∏–∫—Ä–æ—Ç–∏–∫–µ
    mikrotik = get_mikrotik_by_id(mikrotik_id)
    if not mikrotik:
        return await callback.answer("–ú–∏–∫—Ä–æ—Ç–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field:{mikrotik_id}:name")],
        [InlineKeyboardButton(text="–•–æ—Å—Ç API", callback_data=f"edit_field:{mikrotik_id}:host")],
        [InlineKeyboardButton(text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"edit_field:{mikrotik_id}:username")],
        [InlineKeyboardButton(text="–ü–∞—Ä–æ–ª—å", callback_data=f"edit_field:{mikrotik_id}:password")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å OpenVPN", callback_data=f"edit_field:{mikrotik_id}:ovpn_profile")],
        [InlineKeyboardButton(text="–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å WireGuard", callback_data=f"edit_field:{mikrotik_id}:wg_interface")],
        [InlineKeyboardButton(text="Endpoint WireGuard", callback_data=f"edit_field:{mikrotik_id}:wg_endpoint")],
        [InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP WireGuard", callback_data=f"edit_field:{mikrotik_id}:wg_allowed_ips")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞ '{mikrotik.get('name')}':",
        reply_markup=keyboard
    )
    
    await callback.answer()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
@router.callback_query(F.data.startswith("edit_field:"))
async def edit_field_callback(callback: CallbackQuery, state: FSMContext):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    
    parts = callback.data.split(":", 2)
    if len(parts) < 3:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    mikrotik_id = parts[1]
    field = parts[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(mikrotik_id=mikrotik_id, field=field)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∏–∫—Ä–æ—Ç–∏–∫–µ
    mikrotik = get_mikrotik_by_id(mikrotik_id)
    if not mikrotik:
        return await callback.answer("–ú–∏–∫—Ä–æ—Ç–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    field_labels = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "host": "—Ö–æ—Å—Ç API",
        "username": "–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "password": "–ø–∞—Ä–æ–ª—å",
        "ovpn_profile": "–ø—Ä–æ—Ñ–∏–ª—å OpenVPN",
        "wg_interface": "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å WireGuard",
        "wg_endpoint": "endpoint WireGuard",
        "wg_allowed_ips": "—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP WireGuard"
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    current_value = ""
    if field in ["name", "host", "username", "password"]:
        current_value = mikrotik.get(field, "")
    elif field == "ovpn_profile":
        current_value = mikrotik.get("openvpn", {}).get("profile", "")
    elif field == "wg_interface":
        current_value = mikrotik.get("wireguard", {}).get("interface_name", "")
    elif field == "wg_endpoint":
        current_value = mikrotik.get("wireguard", {}).get("endpoint", "")
    elif field == "wg_allowed_ips":
        allowed_ips = mikrotik.get("wireguard", {}).get("allowed_ips", [])
        current_value = ", ".join(allowed_ips)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if field == "name":
        await state.set_state(EditMikrotik.waiting_for_name)
    elif field == "host":
        await state.set_state(EditMikrotik.waiting_for_host)
    elif field == "username":
        await state.set_state(EditMikrotik.waiting_for_username)
    elif field == "password":
        await state.set_state(EditMikrotik.waiting_for_password)
    elif field == "ovpn_profile":
        await state.set_state(EditMikrotik.waiting_for_ovpn_profile)
    elif field == "wg_interface":
        await state.set_state(EditMikrotik.waiting_for_wg_interface)
    elif field == "wg_endpoint":
        await state.set_state(EditMikrotik.waiting_for_wg_endpoint)
    elif field == "wg_allowed_ips":
        await state.set_state(EditMikrotik.waiting_for_wg_allowed_ips)
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è '{field_labels.get(field, field)}': {current_value}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    )
    
    await callback.answer()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data == "cancel_edit")
async def cancel_edit_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(EditMikrotik.waiting_for_name)
async def process_edit_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞
    success, result = edit_mikrotik_field(mikrotik_id, "name", message.text, message.from_user.id)
    
    await message.reply(result)
    await state.clear()

@router.message(EditMikrotik.waiting_for_host)
async def process_edit_host(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    success, result = edit_mikrotik_field(mikrotik_id, "host", message.text, message.from_user.id)
    
    await message.reply(result)
    await state.clear()

@router.message(EditMikrotik.waiting_for_username)
async def process_edit_username(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    success, result = edit_mikrotik_field(mikrotik_id, "username", message.text, message.from_user.id)
    
    await message.reply(result)
    await state.clear()

@router.message(EditMikrotik.waiting_for_password)
async def process_edit_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    success, result = edit_mikrotik_field(mikrotik_id, "password", message.text, message.from_user.id)
    
    await message.reply(result)
    await state.clear()

@router.message(EditMikrotik.waiting_for_ovpn_profile)
async def process_edit_ovpn_profile(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    success, result = edit_mikrotik_field(mikrotik_id, "ovpn_profile", message.text, message.from_user.id)
    
    await message.reply(result)
    await state.clear()

@router.message(EditMikrotik.waiting_for_wg_interface)
async def process_edit_wg_interface(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    success, result = edit_mikrotik_field(mikrotik_id, "wg_interface", message.text, message.from_user.id)
    
    await message.reply(result)
    await state.clear()

@router.message(EditMikrotik.waiting_for_wg_endpoint)
async def process_edit_wg_endpoint(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    success, result = edit_mikrotik_field(mikrotik_id, "wg_endpoint", message.text, message.from_user.id)
    
    await message.reply(result)
    await state.clear()

@router.message(EditMikrotik.waiting_for_wg_allowed_ips)
async def process_edit_wg_allowed_ips(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ –ø–æ –∑–∞–ø—è—Ç–æ–π
    allowed_ips = [ip.strip() for ip in message.text.split(",")]
    
    success, result = edit_mikrotik_field(mikrotik_id, "wg_allowed_ips", allowed_ips, message.from_user.id)
    
    await message.reply(result)
    await state.clear()    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∞–º–∏"
@router.message(lambda message: message.text == "üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∞–º–∏")
async def manage_mikrotiks(message: types.Message):
    admin_level = check_admin_level(message.from_user.id)
    
    if admin_level != 1:
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    await send_mikrotiks_list(message, 1)

async def send_mikrotiks_list(message: types.Message, page: int = 1):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    mikrotiks = get_mikrotik_list(message.from_user.id)
    
    if not mikrotiks:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤.")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 5  # 5 –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (10 –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    total_pages = (len(mikrotiks) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(mikrotiks))
    current_mikrotiks = mikrotiks[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    buttons = []
    for mikrotik in current_mikrotiks:
        row = [
            InlineKeyboardButton(text=f"üìù {mikrotik['name']}", callback_data=f"edit_mikrotik:{mikrotik['id']}"),
            InlineKeyboardButton(text=f"üóëÔ∏è {mikrotik['name']}", callback_data=f"delete_mikrotik:{mikrotik['id']}")
        ]
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"mikrotiks_page:{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"mikrotiks_page:{page+1}"))
        
        buttons.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    management_buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫", callback_data="add_mikrotik")],
        [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω OpenVPN", callback_data="upload_template")]
    ]
    
    buttons.extend(management_buttons)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})" if total_pages > 1 else ""
    
    await message.reply(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∞–º–∏{page_info}:\n"
        f"üìù - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫\n"
        f"üóëÔ∏è - –£–¥–∞–ª–∏—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫\n"
        f"–í—Å–µ–≥–æ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤: {len(mikrotiks)}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
@router.callback_query(F.data.startswith("mikrotiks_page:"))
async def mikrotiks_page_callback(callback: CallbackQuery):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split(":", 1)[1])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    mikrotiks = get_mikrotik_list(callback.from_user.id)
    
    if not mikrotiks:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤", show_alert=True)
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 5  # 5 –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (10 –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    total_pages = (len(mikrotiks) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(mikrotiks))
    current_mikrotiks = mikrotiks[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    buttons = []
    for mikrotik in current_mikrotiks:
        row = [
            InlineKeyboardButton(text=f"üìù {mikrotik['name']}", callback_data=f"edit_mikrotik:{mikrotik['id']}"),
            InlineKeyboardButton(text=f"üóëÔ∏è {mikrotik['name']}", callback_data=f"delete_mikrotik:{mikrotik['id']}")
        ]
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"mikrotiks_page:{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"mikrotiks_page:{page+1}"))
        
        buttons.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    management_buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫", callback_data="add_mikrotik")],
        [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω OpenVPN", callback_data="upload_template")]
    ]
    
    buttons.extend(management_buttons)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})" if total_pages > 1 else ""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∞–º–∏{page_info}:\n"
        f"üìù - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫\n"
        f"üóëÔ∏è - –£–¥–∞–ª–∏—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫\n"
        f"–í—Å–µ–≥–æ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤: {len(mikrotiks)}",
        reply_markup=keyboard
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"
@router.message(lambda message: message.text == "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
async def manage_admins(message: types.Message):
    admin_level = check_admin_level(message.from_user.id)
    
    if admin_level != 1:
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    await send_admins_list(message, 1)

async def send_admins_list(message: types.Message, page: int = 1):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    with open('data/admins.json', 'r', encoding='utf-8') as f:
        admins_data = json.load(f)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    all_admins = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è
    for admin_id in admins_data["level_1"]:
        if admin_id != message.from_user.id:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            all_admins.append({
                "id": admin_id,
                "level": 1,
                "name": f"ID: {admin_id}",
                "type": "L1"
            })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è
    for admin in admins_data["level_2"]:
        all_admins.append({
            "id": admin["id"],
            "level": 2,
            "name": admin.get("name", f"ID: {admin['id']}"),
            "type": "L2"
        })
    
    if not all_admins:
        await message.answer("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 5  # 5 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_pages = (len(all_admins) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(all_admins))
    current_admins = all_admins[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    buttons = []
    for admin in current_admins:
        if admin["level"] == 1:
            buttons.append([
                InlineKeyboardButton(text=f"üìù {admin['type']}: {admin['name']}", callback_data=f"edit_admin_l1:{admin['id']}"),
                InlineKeyboardButton(text=f"üóëÔ∏è {admin['type']}: {admin['name']}", callback_data=f"delete_admin_l1:{admin['id']}")
            ])
        else:
            buttons.append([
                InlineKeyboardButton(text=f"üìù {admin['type']}: {admin['name']}", callback_data=f"edit_admin_l2:{admin['id']}"),
                InlineKeyboardButton(text=f"üóëÔ∏è {admin['type']}: {admin['name']}", callback_data=f"delete_admin_l2:{admin['id']}")
            ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admins_page:{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"admins_page:{page+1}"))
        
        buttons.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})" if total_pages > 1 else ""
    
    await message.answer(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏{page_info}:\n"
        f"üìù - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        f"üóëÔ∏è - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        f"üî¥ L1 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã 1-–≥–æ —É—Ä–æ–≤–Ω—è\n"
        f"üî∂ L2 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã 2-–≥–æ —É—Ä–æ–≤–Ω—è\n"
        f"–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(all_admins)}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.callback_query(F.data.startswith("admins_page:"))
async def admins_page_callback(callback: CallbackQuery):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split(":", 1)[1])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await send_admins_list(callback.message, page)
    await callback.answer()

async def send_admins_list_internal(message: types.Message, page: int = 1):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    with open('data/admins.json', 'r', encoding='utf-8') as f:
        admins_data = json.load(f)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    all_admins = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è
    for admin_id in admins_data["level_1"]:
        if admin_id != message.from_user.id:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            all_admins.append({
                "id": admin_id,
                "level": 1,
                "name": f"ID: {admin_id}",
                "type": "L1"
            })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è
    for admin in admins_data["level_2"]:
        all_admins.append({
            "id": admin["id"],
            "level": 2,
            "name": admin.get("name", f"ID: {admin['id']}"),
            "type": "L2"
        })
    
    if not all_admins:
        await message.answer("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 5  # 5 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_pages = (len(all_admins) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(all_admins))
    current_admins = all_admins[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    buttons = []
    for admin in current_admins:
        if admin["level"] == 1:
            buttons.append([
                InlineKeyboardButton(text=f"üìù {admin['type']}: {admin['name']}", callback_data=f"edit_admin_l1:{admin['id']}"),
                InlineKeyboardButton(text=f"üóëÔ∏è {admin['type']}: {admin['name']}", callback_data=f"delete_admin_l1:{admin['id']}")
            ])
        else:
            buttons.append([
                InlineKeyboardButton(text=f"üìù {admin['type']}: {admin['name']}", callback_data=f"edit_admin_l2:{admin['id']}"),
                InlineKeyboardButton(text=f"üóëÔ∏è {admin['type']}: {admin['name']}", callback_data=f"delete_admin_l2:{admin['id']}")
            ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admins_page:{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"admins_page:{page+1}"))
        
        buttons.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})" if total_pages > 1 else ""
    
    await message.answer(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏{page_info}:\n"
        f"üìù - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        f"üóëÔ∏è - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        f"üî¥ L1 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã 1-–≥–æ —É—Ä–æ–≤–Ω—è\n"
        f"üî∂ L2 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã 2-–≥–æ —É—Ä–æ–≤–Ω—è\n"
        f"–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(all_admins)}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞
@router.callback_query(F.data == "add_mikrotik")
async def add_mikrotik_callback(callback: types.CallbackQuery, state: FSMContext):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    
    await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∞:")
    await state.set_state(AddMikrotik.waiting_for_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞
@router.callback_query(F.data.startswith("delete_mikrotik:"))
async def delete_mikrotik_callback(callback: types.CallbackQuery):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    
    mikrotik_id = callback.data.split(":", 1)[1]
    
    success, message = delete_mikrotik(mikrotik_id, callback.from_user.id)
    
    if success:
        await callback.message.edit_text(message)
    else:
        await callback.answer(message, show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞
@router.message(AddMikrotik.waiting_for_name)
async def process_mikrotik_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Å—Ç API –º–∏–∫—Ä–æ—Ç–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://10.255.64.59:8780):")
    await state.set_state(AddMikrotik.waiting_for_host)

@router.message(AddMikrotik.waiting_for_host)
async def process_mikrotik_host(message: types.Message, state: FSMContext):
    await state.update_data(host=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è API:")
    await state.set_state(AddMikrotik.waiting_for_username)

@router.message(AddMikrotik.waiting_for_username)
async def process_mikrotik_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è API:")
    await state.set_state(AddMikrotik.waiting_for_password)

@router.message(AddMikrotik.waiting_for_password)
async def process_mikrotik_password(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è OpenVPN:")
    await state.set_state(AddMikrotik.waiting_for_ovpn_profile)

@router.message(AddMikrotik.waiting_for_ovpn_profile)
async def process_mikrotik_ovpn_profile(message: types.Message, state: FSMContext):
    await state.update_data(ovpn_profile=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WireGuard:")
    await state.set_state(AddMikrotik.waiting_for_wg_interface)

@router.message(AddMikrotik.waiting_for_wg_interface)
async def process_mikrotik_wg_interface(message: types.Message, state: FSMContext):
    await state.update_data(wg_interface=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ endpoint WireGuard (–Ω–∞–ø—Ä–∏–º–µ—Ä, my.example.domain:port wireguard –∏–ª–∏ —Ö—Ö.—Ö—Ö.—Ö—Ö.—Ö—Ö:port wireguard):")
    await state.set_state(AddMikrotik.waiting_for_wg_endpoint)

@router.message(AddMikrotik.waiting_for_wg_endpoint)
async def process_mikrotik_wg_endpoint(message: types.Message, state: FSMContext):
    await state.update_data(wg_endpoint=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ WireGuard (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 172.22.14.0/24, 172.22.114.0/24 –∏–ª–∏ –µ—Å–ª–∏  –≤–µ—Å—å —Ç—Ä–∞—Ñ—Ñ–∏–∫ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –≤  —Ç—É–Ω–Ω–µ–ª—å 0.0.0.0/0):")
    await state.set_state(AddMikrotik.waiting_for_wg_allowed_ips)

@router.message(AddMikrotik.waiting_for_wg_allowed_ips)
async def process_mikrotik_wg_allowed_ips(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP
    allowed_ips = [ip.strip() for ip in message.text.split(",")]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–∫—Ä–æ—Ç–∏–∫
    success, result_message = add_mikrotik(
        name=data["name"],
        host=data["host"],
        username=data["username"],
        password=data["password"],
        openvpn_profile=data["ovpn_profile"],
        wg_interface_name=data["wg_interface"],
        wg_endpoint=data["wg_endpoint"],
        wg_allowed_ips=allowed_ips,
        admin_id=message.from_user.id
    )
    
    await message.reply(result_message)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    from handlers.vpn import get_main_menu
    await message.answer(
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º:",
        reply_markup=get_main_menu(message.from_user.id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ OpenVPN
@router.callback_query(F.data == "upload_template")
async def upload_template_callback(callback: types.CallbackQuery, state: FSMContext):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    
    mikrotiks = get_mikrotik_list(callback.from_user.id)
    
    if not mikrotiks:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤.", show_alert=True)
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–∏–∫–∞
    buttons = []
    for mikrotik in mikrotiks:
        buttons.append([InlineKeyboardButton(text=mikrotik['name'], callback_data=f"select_mikrotik:{mikrotik['id']}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ OpenVPN:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("select_mikrotik:"))
async def select_mikrotik_callback(callback: types.CallbackQuery, state: FSMContext):
    mikrotik_id = callback.data.split(":", 1)[1]
    await state.update_data(mikrotik_id=mikrotik_id)
    await callback.message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ OpenVPN (.ovpn):")
    await state.set_state(UploadTemplate.waiting_for_template)
    await callback.answer()

@router.message(UploadTemplate.waiting_for_template)
async def process_template_file(message: types.Message, state: FSMContext, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª
    if not message.document:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ .ovpn. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not message.document.file_name.endswith('.ovpn'):
        await message.reply("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .ovpn. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –º–∏–∫—Ä–æ—Ç–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥)
    file_path = f"temp_{message.document.file_id}.ovpn"
    await bot.download(message.document, file_path)
    
    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            template_content = f.read()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        success, result_message = upload_openvpn_template(mikrotik_id, template_content, message.from_user.id)
        
        await message.reply(result_message)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        if os.path.exists(file_path):
            os.unlink(file_path)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è
@router.callback_query(F.data == "add_admin")
async def add_admin_callback(callback: types.CallbackQuery, state: FSMContext):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level != 1:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    
    await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è:")
    await state.set_state(AddAdmin.waiting_for_id)
    await callback.answer()

@router.message(AddAdmin.waiting_for_id)
async def process_admin_id(message: types.Message, state: FSMContext):
    try:
        admin_id = int(message.text)
        await state.update_data(admin_id=admin_id)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        await state.set_state(AddAdmin.waiting_for_name)
    except ValueError:
        await message.reply("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.message(AddAdmin.waiting_for_name)
async def process_admin_name(message: types.Message, state: FSMContext):
    await state.update_data(admin_name=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    mikrotiks = get_mikrotik_list(message.from_user.id)
    
    if not mikrotiks:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤.")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    buttons = []
    for mikrotik in mikrotiks:
        buttons.append([InlineKeyboardButton(
            text=mikrotik['name'], 
            callback_data=f"select_admin_mikrotik:{mikrotik['id']}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    buttons.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="admin_mikrotiks_done")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. "
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ç–∏–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞. "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=keyboard
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    await state.update_data(selected_mikrotiks=[])
    await state.set_state(AddAdmin.waiting_for_mikrotiks)

@router.callback_query(F.data.startswith("select_admin_mikrotik:"))
async def select_admin_mikrotik_callback(callback: types.CallbackQuery, state: FSMContext):
    mikrotik_id = callback.data.split(":", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∏
    data = await state.get_data()
    selected_mikrotiks = data.get("selected_mikrotiks", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –º–∏–∫—Ä–æ—Ç–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
    if mikrotik_id in selected_mikrotiks:
        selected_mikrotiks.remove(mikrotik_id)
    else:
        selected_mikrotiks.append(mikrotik_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    await state.update_data(selected_mikrotiks=selected_mikrotiks)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    mikrotiks = get_mikrotik_list(callback.from_user.id)
    selected_names = [m['name'] for m in mikrotiks if m['id'] in selected_mikrotiks]
    
    await callback.answer(f"{'–î–æ–±–∞–≤–ª–µ–Ω' if mikrotik_id in selected_mikrotiks else '–£–¥–∞–ª–µ–Ω'} –º–∏–∫—Ä–æ—Ç–∏–∫")
    
    if selected_names:
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∏: {', '.join(selected_names)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. "
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ç–∏–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞. "
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=callback.message.reply_markup
        )
    else:
        await callback.message.edit_text(
            "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ç–∏–∫–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. "
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ç–∏–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞. "
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=callback.message.reply_markup
        )

@router.callback_query(F.data == "admin_mikrotiks_done")
async def admin_mikrotiks_done_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    admin_id = data.get("admin_id")
    admin_name = data.get("admin_name")
    selected_mikrotiks = data.get("selected_mikrotiks", [])
    
    if not selected_mikrotiks:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∏–∫—Ä–æ—Ç–∏–∫.", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    success, result_message = add_level2_admin(
        admin_id, admin_name, selected_mikrotiks, callback.from_user.id
    )
    
    await callback.message.edit_text(result_message)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.callback_query(F.data.startswith("delete_admin_l2:"))
async def delete_admin_l2_callback(callback: types.CallbackQuery):
    admin_id = int(callback.data.split(":", 1)[1])
    
    success, result_message = delete_admin(admin_id, callback.from_user.id)
    
    if success:
        await callback.message.edit_text(result_message)
    else:
        await callback.answer(result_message, show_alert=True)