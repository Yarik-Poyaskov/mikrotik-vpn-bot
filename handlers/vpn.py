import asyncio
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.markdown import hbold, hcode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os

from config import ALLOWED_USERS, ALLOWED_GROUPS
from utils.mikrotik_api import (
    get_active_openvpn_profiles,
    get_enabled_openvpn_profiles,
    deactivate_openvpn_profile,
    disable_openvpn_secret,
    add_openvpn_profile,
    get_openvpn_profile_credentials
)
from utils.wireguard_api import (
    get_wireguard_peers,
    disable_wireguard_peer,
    add_wireguard_peer,
    regenerate_wireguard_config
)
from utils.vpn_template import generate_ovpn_file
from utils.admin_utils import check_admin_level, get_mikrotik_by_id
from handlers.connection import get_current_mikrotik

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
AUTO_DELETE_DELAY = 30  # 30 —Å–µ–∫—É–Ω–¥

router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
class ProfileCreation(StatesGroup):
    waiting_for_name = State()

class WireGuardProfileCreation(StatesGroup):
    waiting_for_name = State()

# –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
class PaginationData(StatesGroup):
    profiles_page = State()
    wireguard_page = State()

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard_layout = [
        [
            KeyboardButton(text="üìã OpenVPN –ü—Ä–æ—Ñ–∏–ª–∏"),
            KeyboardButton(text="üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ OpenVPN")
        ],
        [
            KeyboardButton(text="üî∑ WireGuard –ü—Ä–æ—Ñ–∏–ª–∏"),
            KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å VPN")
        ],
        [
            KeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è
    if user_id and check_admin_level(user_id) == 1:
        keyboard_layout.append([
            KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
            KeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        ])
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_layout,
        resize_keyboard=True,
        one_time_keyboard=False,
        persistent=True
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ç–∏–∫–∞
async def check_mikrotik_selected(message: types.Message, user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å"""
    mikrotik_id = get_current_mikrotik(user_id)
    
    if not mikrotik_id:
        await message.reply(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫ —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫'."
        )
        return False
    
    return True

def is_authorized(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin_level = check_admin_level(message.from_user.id)
    if admin_level > 0:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 1-–≥–æ –∏–ª–∏ 2-–≥–æ —É—Ä–æ–≤–Ω—è
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if message.chat.type == "private":
        return message.from_user.id in ALLOWED_USERS
    elif message.chat.type in ["group", "supergroup"]:
        return message.chat.id in ALLOWED_GROUPS
    return False

def is_authorized_from_callback(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin_level = check_admin_level(callback.from_user.id)
    if admin_level > 0:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 1-–≥–æ –∏–ª–∏ 2-–≥–æ —É—Ä–æ–≤–Ω—è
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    chat = callback.message.chat
    if chat.type == "private":
        return callback.from_user.id in ALLOWED_USERS
    elif chat.type in ["group", "supergroup"]:
        return chat.id in ALLOWED_GROUPS
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def delete_message_after_delay(message: types.Message, delay: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è
@router.message(lambda message: message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin_panel_button(message: types.Message):
    if check_admin_level(message.from_user.id) != 1:
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º 1-–≥–æ —É—Ä–æ–≤–Ω—è.")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ admin_panel
    from handlers.admin_panel import get_admin_keyboard
    
    await message.reply(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è",
        reply_markup=get_admin_keyboard()
    )

@router.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu_button(message: types.Message):
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é VPN-–±–æ—Ç–∞:",
        reply_markup=get_main_menu(message.from_user.id)
    )

@router.message(lambda message: message.text == "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
async def handle_connection_button(message: types.Message):
    admin_level = check_admin_level(message.from_user.id)
    
    if admin_level == 0:
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ connection
    from handlers.connection import select_mikrotik_command
    await select_mikrotik_command(message)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è OpenVPN
@router.message(Command("status"))
async def openvpn_status_handler(message: types.Message):
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    await send_openvpn_status(message, mikrotik_id)

@router.message(Command("profile"))
async def openvpn_profile_handler(message: types.Message):
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    await send_openvpn_profiles(message, 1, mikrotik_id)

@router.message(Command("add_profile"))
async def add_profile_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è OpenVPN"""
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    await state.update_data(mikrotik_id=mikrotik_id)
    
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ OpenVPN –ø—Ä–æ—Ñ–∏–ª—è:")
    await state.set_state(ProfileCreation.waiting_for_name)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è WireGuard
@router.message(Command("wg_status"))
async def wireguard_status_handler(message: types.Message):
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    await send_wireguard_peers(message, 1, mikrotik_id)

@router.message(Command("add_wg"))
async def add_wireguard_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è WireGuard"""
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    await state.update_data(mikrotik_id=mikrotik_id)
    
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ WireGuard –ø–∏—Ä–∞:")
    await state.set_state(WireGuardProfileCreation.waiting_for_name)

@router.message(Command("start"))
async def show_buttons(message: types.Message):
    if not is_authorized(message):
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é VPN-–±–æ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫'.",
        reply_markup=get_main_menu(message.from_user.id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id
    )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(lambda message: message.text == "üìã OpenVPN –ü—Ä–æ—Ñ–∏–ª–∏")
async def handle_openvpn_profiles(message: types.Message):
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    await send_openvpn_profiles(message, 1, mikrotik_id)

@router.message(lambda message: message.text == "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ OpenVPN")
async def handle_active_vpn(message: types.Message):
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    await send_openvpn_status(message, mikrotik_id)

@router.message(lambda message: message.text == "üî∑ WireGuard –ü—Ä–æ—Ñ–∏–ª–∏")
async def handle_wireguard_profiles(message: types.Message):
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    await send_wireguard_peers(message, 1, mikrotik_id)

@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å VPN")
async def handle_add_vpn(message: types.Message):
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ VPN –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å OpenVPN", callback_data=f"add_profile:{mikrotik_id}")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å WireGuard", callback_data=f"add_wireguard:{mikrotik_id}")]
    ])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø VPN –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.startswith("ovpn_page:"))
async def openvpn_page_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split(":", 1)[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    mikrotik_id = get_current_mikrotik(callback.from_user.id)
    if not mikrotik_id:
        await callback.message.reply(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫'."
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await send_openvpn_profiles(callback.message, page, mikrotik_id)
    await callback.answer()

@router.callback_query(F.data.startswith("wg_page:"))
async def wireguard_page_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split(":", 1)[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    mikrotik_id = get_current_mikrotik(callback.from_user.id)
    if not mikrotik_id:
        await callback.message.reply(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫'."
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await send_wireguard_peers(callback.message, page, mikrotik_id)
    await callback.answer()

@router.callback_query(F.data == "page_info")
async def page_info_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏", show_alert=True)

@router.callback_query(F.data.startswith("download_ovpn:"))
async def download_ovpn_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    parts = callback.data.split(":", 2)
    if len(parts) < 3:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    mikrotik_id = parts[1]
    name = parts[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    result = get_openvpn_profile_credentials(name, mikrotik_id)
    
    if isinstance(result, dict) and result.get("success"):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        name = result['name']
        password = result['password']
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º .ovpn —Ñ–∞–π–ª
            file_path, filename = generate_ovpn_file(name, password, mikrotik_id)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            vpn_file = FSInputFile(file_path, filename=filename)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await callback.message.answer_document(
                document=vpn_file,
                caption=f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å OpenVPN {hbold(name)} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                parse_mode="HTML"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.unlink(file_path)
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
            await callback.message.answer(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è: {e}",
                parse_mode="HTML"
            )
    else:
        # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
        await callback.message.answer(result)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback.message.delete()
    except:
        pass
    
    await callback.answer()

@router.callback_query(F.data.startswith("download_wg:"))
async def download_wg_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    parts = callback.data.split(":", 2)
    if len(parts) < 3:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    mikrotik_id = parts[1]
    peer_id = parts[2]
    
    # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–∏–∫—Ä–æ—Ç–∏–∫–∞
    result = regenerate_wireguard_config(peer_id, mikrotik_id)
    
    if isinstance(result, dict) and result.get("success"):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        name = result['name']
        conf_file = result['conf_file']
        conf_filename = result['conf_filename']
        qr_file = result['qr_file']
        qr_filename = result['qr_filename']
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            config_file = FSInputFile(conf_file, filename=conf_filename)
            qr_image = FSInputFile(qr_file, filename=qr_filename)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            await callback.message.answer_document(
                document=config_file,
                caption=f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard –¥–ª—è –ø–∏—Ä–∞ {hbold(name)}.\n"
                        f"–ù–∏–∂–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω QR-–∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
                parse_mode="HTML"
            )
            await callback.message.answer_photo(
                photo=qr_image,
                caption=f"QR-–∫–æ–¥ –¥–ª—è –ø–∏—Ä–∞ {hbold(name)}. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard.",
                parse_mode="HTML"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.unlink(conf_file)
            os.unlink(qr_file)
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤
            await callback.message.answer(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã: {e}",
                parse_mode="HTML"
            )
    else:
        # –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await callback.message.answer(result)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback.message.delete()
    except:
        pass
    
    await callback.answer()

@router.callback_query(F.data == "show_status")
async def openvpn_status_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    mikrotik_id = get_current_mikrotik(callback.from_user.id)
    if not mikrotik_id:
        await callback.message.reply(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫'."
        )
        return
    
    await send_openvpn_status(callback.message, mikrotik_id)
    await callback.answer()

@router.callback_query(F.data == "show_profiles")
async def openvpn_profiles_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    mikrotik_id = get_current_mikrotik(callback.from_user.id)
    if not mikrotik_id:
        await callback.message.reply(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫'."
        )
        return
    
    await send_openvpn_profiles(callback.message, 1, mikrotik_id)
    await callback.answer()

@router.callback_query(F.data.startswith("add_profile:"))
async def add_profile_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è OpenVPN"""
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    mikrotik_id = callback.data.split(":", 1)[1]
    
    await state.update_data(mikrotik_id=mikrotik_id)
    await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ OpenVPN –ø—Ä–æ—Ñ–∏–ª—è:")
    await state.set_state(ProfileCreation.waiting_for_name)
    await callback.answer()

@router.callback_query(F.data == "show_wireguard")
async def wireguard_peers_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    mikrotik_id = get_current_mikrotik(callback.from_user.id)
    if not mikrotik_id:
        await callback.message.reply(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫'."
        )
        return
    
    await send_wireguard_peers(callback.message, 1, mikrotik_id)
    await callback.answer()

@router.callback_query(F.data.startswith("add_wireguard:"))
async def add_wireguard_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è WireGuard"""
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    mikrotik_id = callback.data.split(":", 1)[1]
    
    await state.update_data(mikrotik_id=mikrotik_id)
    await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ WireGuard –ø–∏—Ä–∞:")
    await state.set_state(WireGuardProfileCreation.waiting_for_name)
    await callback.answer()

@router.callback_query(F.data.startswith("deactivate:"))
async def deactivate_profile_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)

    parts = callback.data.split(":", 2)
    if len(parts) < 3:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    mikrotik_id = parts[1]
    name = parts[2]
    
    result = deactivate_openvpn_profile(name, mikrotik_id)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    sent_msg = await callback.message.answer(result)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback.message.delete()
    except:
        pass
        
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
    asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
    
    await callback.answer()

@router.callback_query(F.data.startswith("disable:"))
async def disable_secret_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    parts = callback.data.split(":", 2)
    if len(parts) < 3:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    mikrotik_id = parts[1]
    name = parts[2]
    
    result = disable_openvpn_secret(name, mikrotik_id)
    
    sent_msg = await callback.message.answer(result)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback.message.delete()
    except:
        pass
        
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
    asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
    
    await callback.answer()

@router.callback_query(F.data.startswith("disable_wg:"))
async def disable_wireguard_callback(callback: CallbackQuery):
    if not is_authorized_from_callback(callback):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    parts = callback.data.split(":", 2)
    if len(parts) < 3:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    mikrotik_id = parts[1]
    peer_id = parts[2]
    
    result = disable_wireguard_peer(peer_id, mikrotik_id)
    
    sent_msg = await callback.message.answer(result)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback.message.delete()
    except:
        pass
        
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
    asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
@router.message(F.text.startswith("/find_ovpn"))
async def find_openvpn_profile(message: types.Message):
    """–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è OpenVPN –ø–æ –∏–º–µ–Ω–∏"""
    if not is_authorized(message):
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∏–∫—Ä–æ—Ç–∏–∫
    if not await check_mikrotik_selected(message, message.from_user.id):
        return
    
    mikrotik_id = get_current_mikrotik(message.from_user.id)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find_ovpn <–∏–º—è –ø—Ä–æ—Ñ–∏–ª—è>")
    
    search_name = parts[1].lower()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
    profiles = get_enabled_openvpn_profiles(mikrotik_id)
    if isinstance(profiles, str):
        return await message.reply(profiles)
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    matching_profiles = [p for p in profiles if search_name in p.get('name', '').lower()]
    
    if not matching_profiles:
        return await message.reply(f"–ü—Ä–æ—Ñ–∏–ª–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{search_name}', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    buttons = []
    for p in matching_profiles[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        name = p.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        row = [
            InlineKeyboardButton(text=f"üì• {name}", callback_data=f"download_ovpn:{mikrotik_id}:{name}"),
            InlineKeyboardButton(text=f"üóëÔ∏è {name}", callback_data=f"disable:{mikrotik_id}:{name}")
        ]
        buttons.append(row)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    sent_msg = await message.reply(
        f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(matching_profiles)}\n"
        f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {min(10, len(matching_profiles))}:",
        reply_markup=keyboard
    )
    
    asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))

@router.message(ProfileCreation.waiting_for_name)
async def process_profile_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è OpenVPN"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    profile_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if not profile_name or len(profile_name) < 3:
        await message.reply("–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    invalid_chars = "'\"\\/?*:;|<>, "
    if any(c in invalid_chars for c in profile_name):
        await message.reply(f"–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã: {invalid_chars}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –º–∏–∫—Ä–æ—Ç–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    if not mikrotik_id:
        await message.reply("–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω –º–∏–∫—Ä–æ—Ç–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await message.reply(f"‚è≥ –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—å OpenVPN {hbold(profile_name)}...")
    result = add_openvpn_profile(profile_name, mikrotik_id)
    
     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    if isinstance(result, dict) and result.get("success"):
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=get_main_menu(message.from_user.id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id
        )
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=get_main_menu()
        )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if isinstance(result, dict) and result.get("success"):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        name = result['name']
        password = result['password']
        creator_id = message.from_user.id
        creator_name = message.from_user.full_name
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ç–∏–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        mikrotik_info = get_mikrotik_by_id(mikrotik_id)
        mikrotik_name = mikrotik_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫") if mikrotik_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫"
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º .ovpn —Ñ–∞–π–ª
            file_path, filename = generate_ovpn_file(name, password, mikrotik_id)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            vpn_file = FSInputFile(file_path, filename=filename)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–æ–∑–¥–∞—Ç–µ–ª—é
            await message.reply_document(
                document=vpn_file,
                caption=f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å OpenVPN {hbold(name)} –¥–ª—è {hbold(mikrotik_name)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            bot = message.bot
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —ç—Ç–æ–º—É –º–∏–∫—Ä–æ—Ç–∏–∫—É
            # admins_with_access = [] # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            from utils.admin_utils import load_admins
            admins_data = load_admins()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è
            # admins_with_access.extend(admins_data["level_1"]) # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            admins_with_access = admins_data["level_1"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —ç—Ç–æ–º—É –º–∏–∫—Ä–æ—Ç–∏–∫—É
            # for admin in admins_data["level_2"]: # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            #    if mikrotik_id in admin.get("allowed_mikrotiks", []): # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            #        admins_with_access.append(admin["id"]) # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            
            # –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
            # admins_with_access = list(set(admins_with_access)) # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            
            for admin_id in admins_with_access:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è, —Ç.–∫. –µ–º—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
                if admin_id != creator_id:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
                        admin_vpn_file = FSInputFile(file_path, filename=filename)
                        await bot.send_document(
                            chat_id=admin_id,
                            document=admin_vpn_file,
                            caption=f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {creator_name} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å OpenVPN {hbold(name)} –¥–ª—è {hbold(mikrotik_name)}.",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.unlink(file_path)
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞, –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
            await message.reply(
                f"{result['message']}\n\n"
                f"üìù –ò–º—è: {hbold(name)}\n"
                f"üîë –ü–∞—Ä–æ–ª—å: {hcode(password)}\n\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è: {e}",
                parse_mode="HTML"
            )
    else:
        # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await message.reply(result)

@router.message(WireGuardProfileCreation.waiting_for_name)
async def process_wireguard_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏ –ø–∏—Ä–∞ WireGuard"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–∏—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    peer_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if not peer_name or len(peer_name) < 3:
        await message.reply("–ò–º—è –ø–∏—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    invalid_chars = "'\"\\/?*:;|<>, "
    if any(c in invalid_chars for c in peer_name):
        await message.reply(f"–ò–º—è –ø–∏—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã: {invalid_chars}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –º–∏–∫—Ä–æ—Ç–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    mikrotik_id = data.get("mikrotik_id")
    
    if not mikrotik_id:
        await message.reply("–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω –º–∏–∫—Ä–æ—Ç–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∏—Ä
    await message.reply(f"‚è≥ –°–æ–∑–¥–∞—é –ø–∏—Ä WireGuard {hbold(peer_name)}...")
    result = add_wireguard_peer(peer_name, mikrotik_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ç–∏–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    mikrotik_info = get_mikrotik_by_id(mikrotik_id)
    mikrotik_name = mikrotik_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫") if mikrotik_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if isinstance(result, dict) and result.get("success"):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ä–∞
        name = result['name']
        conf_file = result['conf_file']
        conf_filename = result['conf_filename']
        qr_file = result['qr_file']
        qr_filename = result['qr_filename']
        creator_id = message.from_user.id
        creator_name = message.from_user.full_name
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            config_file = FSInputFile(conf_file, filename=conf_filename)
            qr_image = FSInputFile(qr_file, filename=qr_filename)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞—Ç–µ–ª—é
            await message.reply_document(
                document=config_file,
                caption=f"‚úÖ –ü–∏—Ä WireGuard {hbold(name)} –¥–ª—è {hbold(mikrotik_name)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n"
                        f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ QR-–∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                parse_mode="HTML"
            )
            await message.reply_photo(
                photo=qr_image,
                caption=f"QR-–∫–æ–¥ –¥–ª—è –ø–∏—Ä–∞ {hbold(name)}. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard.",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —ç—Ç–æ–º—É –º–∏–∫—Ä–æ—Ç–∏–∫—É
            bot = message.bot
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —ç—Ç–æ–º—É –º–∏–∫—Ä–æ—Ç–∏–∫—É
            # admins_with_access = [] # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            from utils.admin_utils import load_admins
            admins_data = load_admins()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è
            # admins_with_access.extend(admins_data["level_1"]) # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã 1-–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            admins_with_access = admins_data["level_1"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —ç—Ç–æ–º—É –º–∏–∫—Ä–æ—Ç–∏–∫—É
            # for admin in admins_data["level_2"]: # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            #    if mikrotik_id in admin.get("allowed_mikrotiks", []): # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            #        admins_with_access.append(admin["id"]) # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            
            # –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
            # admins_with_access = list(set(admins_with_access)) # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å  –µ—Å–ª–∏ –Ω—É–∂–Ω–æ  —á—Ç–æ–±—ã  –ø–æ–ª—É—á–∞–ª–∏  –∞–¥–º–∏–Ω—ã  2–≥–æ  —É—Ä–æ–≤–Ω—è
            
            for admin_id in admins_with_access:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è, —Ç.–∫. –µ–º—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
                if admin_id != creator_id:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
                        admin_config_file = FSInputFile(conf_file, filename=conf_filename)
                        admin_qr_image = FSInputFile(qr_file, filename=qr_filename)
                        
                        await bot.send_document(
                            chat_id=admin_id,
                            document=admin_config_file,
                            caption=f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {creator_name} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –ø–∏—Ä WireGuard {hbold(name)} –¥–ª—è {hbold(mikrotik_name)}.\n"
                                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ QR-–∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                            parse_mode="HTML"
                        )
                        await bot.send_photo(
                            chat_id=admin_id,
                            photo=admin_qr_image,
                            caption=f"QR-–∫–æ–¥ –¥–ª—è –ø–∏—Ä–∞ {hbold(name)}. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard.",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã WireGuard –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.unlink(conf_file)
            os.unlink(qr_file)
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
            await message.reply(
                f"{result['message']}\n\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã: {e}",
                parse_mode="HTML"
            )
    else:
        # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ä–∞
        await message.reply(result)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await message.answer(
        "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu(message.from_user.id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id
    )

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async def send_openvpn_status(message: types.Message, mikrotik_id: str):
    profiles = get_active_openvpn_profiles(mikrotik_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ç–∏–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    mikrotik_info = get_mikrotik_by_id(mikrotik_id)
    mikrotik_name = mikrotik_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫") if mikrotik_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫"
    
    if isinstance(profiles, str):
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π (–±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å)
        sent_msg = await message.answer(profiles)
        asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
    elif not profiles:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π (–±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å)
        sent_msg = await message.answer(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö OVPN –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ {hbold(mikrotik_name)}.", parse_mode="HTML")
        asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –∏–º–µ–Ω–∏
        profiles = sorted(profiles, key=lambda p: p.get('name', '').lower())
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
        buttons = []
        row = []
        for i, p in enumerate(profiles):
            name = p.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            row.append(InlineKeyboardButton(text=f"üî¥ {name}", callback_data=f"deactivate:{mikrotik_id}:{name}"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if len(row) == 2 or i == len(profiles) - 1:
                buttons.append(row)
                row = []
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        sent_msg = await message.answer(
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ OpenVPN –Ω–∞ {hbold(mikrotik_name)}:", 
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))

async def send_openvpn_profiles(message: types.Message, page: int = 1, mikrotik_id: str = None):
    # –ï—Å–ª–∏ mikrotik_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
    if not mikrotik_id:
        mikrotik_id = get_current_mikrotik(message.from_user.id)
        if not mikrotik_id:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫'."
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ç–∏–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    mikrotik_info = get_mikrotik_by_id(mikrotik_id)
    mikrotik_name = mikrotik_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫") if mikrotik_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫"
    
    profiles = get_enabled_openvpn_profiles(mikrotik_id)
    
    if isinstance(profiles, str):
        sent_msg = await message.answer(profiles)
        asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
    elif not profiles:
        sent_msg = await message.answer(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö OpenVPN –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ {hbold(mikrotik_name)}.", parse_mode="HTML")
        asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = sorted(profiles, key=lambda p: p.get('name', '').lower())
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        items_per_page = 10  # 10 –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (20 –∫–Ω–æ–ø–æ–∫)
        total_pages = (len(profiles) + items_per_page - 1) // items_per_page
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1:
            page = 1
        if page > total_pages:
            page = total_pages
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * items_per_page
        end_idx = min(start_idx + items_per_page, len(profiles))
        current_profiles = profiles[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        buttons = []
        for p in current_profiles:
            name = p.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            row = [
                InlineKeyboardButton(text=f"üì• {name}", callback_data=f"download_ovpn:{mikrotik_id}:{name}"),
                InlineKeyboardButton(text=f"üóëÔ∏è {name}", callback_data=f"disable:{mikrotik_id}:{name}")
            ]
            buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ovpn_page:{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"ovpn_page:{page+1}"))
        
        if nav_buttons:
            buttons.append(nav_buttons)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        sent_msg = await message.answer(
            f"–ü—Ä–æ—Ñ–∏–ª–∏ OpenVPN –Ω–∞ {hbold(mikrotik_name)} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n"
            f"üì• - –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            f"üóëÔ∏è - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            f"–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}", 
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY * 2))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

async def send_wireguard_peers(message: types.Message, page: int = 1, mikrotik_id: str = None):
    # –ï—Å–ª–∏ mikrotik_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
    if not mikrotik_id:
        mikrotik_id = get_current_mikrotik(message.from_user.id)
        if not mikrotik_id:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫'."
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Ç–∏–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    mikrotik_info = get_mikrotik_by_id(mikrotik_id)
    mikrotik_name = mikrotik_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫") if mikrotik_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫"
    
    peers = get_wireguard_peers(mikrotik_id)
    
    if isinstance(peers, str):
        sent_msg = await message.answer(peers)
        asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
    elif not peers:
        sent_msg = await message.answer(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Ä–æ–≤ WireGuard –Ω–∞ {hbold(mikrotik_name)}.", parse_mode="HTML")
        asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
    else:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∏—Ä—ã (–Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ)
        active_peers = [p for p in peers if p.get("disabled") == "false"]
        
        if not active_peers:
            sent_msg = await message.answer(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤ WireGuard –Ω–∞ {hbold(mikrotik_name)}.", parse_mode="HTML")
            asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY))
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∏—Ä—ã
        active_peers = sorted(active_peers, key=lambda p: p.get('name', '').lower())
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        items_per_page = 10  # 10 –ø–∏—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        total_pages = (len(active_peers) + items_per_page - 1) // items_per_page
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1:
            page = 1
        if page > total_pages:
            page = total_pages
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * items_per_page
        end_idx = min(start_idx + items_per_page, len(active_peers))
        current_peers = active_peers[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        buttons = []
        for p in current_peers:
            name = p.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            peer_id = p.get(".id", "")
            if peer_id:
                row = [
                    InlineKeyboardButton(text=f"üì• {name}", callback_data=f"download_wg:{mikrotik_id}:{peer_id}"),
                    InlineKeyboardButton(text=f"üóëÔ∏è {name}", callback_data=f"disable_wg:{mikrotik_id}:{peer_id}")
                ]
                buttons.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"wg_page:{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"wg_page:{page+1}"))
        
        if nav_buttons:
            buttons.append(nav_buttons)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        sent_msg = await message.answer(
            f"–ü–∏—Ä—ã WireGuard –Ω–∞ {hbold(mikrotik_name)} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n"
            f"üì• - –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
            f"üóëÔ∏è - –£–¥–∞–ª–∏—Ç—å –ø–∏—Ä\n"
            f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤: {len(active_peers)}", 
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        asyncio.create_task(delete_message_after_delay(sent_msg, AUTO_DELETE_DELAY * 2))