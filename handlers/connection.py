from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.admin_utils import check_admin_level, get_mikrotik_list

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–∏–∫–∞
class SelectMikrotik(StatesGroup):
    waiting_for_mikrotik = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ç–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_mikrotik = {}

def get_connection_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–∏–∫–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        persistent=True
    )
    return keyboard

@router.message(Command("connect"))
async def connect_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–∏–∫–∞"""
    admin_level = check_admin_level(message.from_user.id)
    
    if admin_level == 0:
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    
    await send_mikrotiks_selection(message, 1)

@router.message(lambda message: message.text == "üîÑ –í—ã–±—Ä–∞—Ç—å –º–∏–∫—Ä–æ—Ç–∏–∫")
async def select_mikrotik_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–∏–∫–∞"""
    admin_level = check_admin_level(message.from_user.id)
    
    if admin_level == 0:
        return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    
    await send_mikrotiks_selection(message, 1)

async def send_mikrotiks_selection(message: types.Message, page: int = 1):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    mikrotiks = get_mikrotik_list(message.from_user.id)
    
    if not mikrotiks:
        return await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤.")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 8  # 8 –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_pages = (len(mikrotiks) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(mikrotiks))
    current_mikrotiks = mikrotiks[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
    buttons = []
    row = []
    for i, mikrotik in enumerate(current_mikrotiks):
        row.append(InlineKeyboardButton(text=mikrotik['name'], callback_data=f"connect_mikrotik:{mikrotik['id']}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if len(row) == 2 or i == len(current_mikrotiks) - 1:
            buttons.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"mikrotiks_select_page:{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"mikrotiks_select_page:{page+1}"))
        
        buttons.append(nav_buttons)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})" if total_pages > 1 else ""
    current_mikrotik = get_current_mikrotik(message.from_user.id)
    current_info = ""
    
    if current_mikrotik:
        # –ù–∞–π–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∏–∫—Ä–æ—Ç–∏–∫–∞
        current_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        for m in mikrotiks:
            if m['id'] == current_mikrotik:
                current_name = m['name']
                break
        current_info = f"\nüîó –¢–µ–∫—É—â–∏–π: {current_name}"
    
    await message.reply(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è{page_info}:{current_info}\n"
        f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(mikrotiks)}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
@router.callback_query(F.data.startswith("mikrotiks_select_page:"))
async def mikrotiks_select_page_callback(callback: CallbackQuery):
    admin_level = check_admin_level(callback.from_user.id)
    
    if admin_level == 0:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split(":", 1)[1])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤
    mikrotiks = get_mikrotik_list(callback.from_user.id)
    
    if not mikrotiks:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤", show_alert=True)
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 8  # 8 –º–∏–∫—Ä–æ—Ç–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_pages = (len(mikrotiks) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(mikrotiks))
    current_mikrotiks = mikrotiks[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
    buttons = []
    row = []
    for i, mikrotik in enumerate(current_mikrotiks):
        row.append(InlineKeyboardButton(text=mikrotik['name'], callback_data=f"connect_mikrotik:{mikrotik['id']}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if len(row) == 2 or i == len(current_mikrotiks) - 1:
            buttons.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"mikrotiks_select_page:{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"mikrotiks_select_page:{page+1}"))
        
        buttons.append(nav_buttons)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    page_info = f" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})" if total_pages > 1 else ""
    current_mikrotik = get_current_mikrotik(callback.from_user.id)
    current_info = ""
    
    if current_mikrotik:
        # –ù–∞–π–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∏–∫—Ä–æ—Ç–∏–∫–∞
        current_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        for m in mikrotiks:
            if m['id'] == current_mikrotik:
                current_name = m['name']
                break
        current_info = f"\nüîó –¢–µ–∫—É—â–∏–π: {current_name}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ç–∏–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è{page_info}:{current_info}\n"
        f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(mikrotiks)}",
        reply_markup=keyboard
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("connect_mikrotik:"))
async def connect_mikrotik_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∏–∫—Ä–æ—Ç–∏–∫–∞"""
    mikrotik_id = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ç–∏–∫—É
    mikrotiks = get_mikrotik_list(user_id)
    mikrotik_names = {m['id']: m['name'] for m in mikrotiks}
    
    if mikrotik_id not in mikrotik_names:
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∏–∫—Ä–æ—Ç–∏–∫—É.", show_alert=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ç–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_mikrotik[user_id] = mikrotik_id
    
    await callback.message.edit_text(f"‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –º–∏–∫—Ä–æ—Ç–∏–∫—É: {mikrotik_names[mikrotik_id]}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    from handlers.vpn import get_main_menu
    await callback.message.answer(
        f"üîó –¢–µ–∫—É—â–∏–π –º–∏–∫—Ä–æ—Ç–∏–∫: {mikrotik_names[mikrotik_id]}\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å VPN –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.",
        reply_markup=get_main_menu(user_id)
    )
    
    await callback.answer(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {mikrotik_names[mikrotik_id]}")

def get_current_mikrotik(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_mikrotik.get(user_id)